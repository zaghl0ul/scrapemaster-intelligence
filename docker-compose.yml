version: '3.8'

services:
  app:
    build: .
    container_name: scrapemaster-app
    ports:
      - "8513:8513"
    environment:
      - DATABASE_URL=postgresql://scrapemaster:${DB_PASSWORD}@db:5432/scrapemaster
      - REDIS_URL=redis://redis:6379
      - SECRET_KEY=${SECRET_KEY}
      - SENTRY_DSN=${SENTRY_DSN}
    volumes:
      - ./data:/app/data
      - ./logs:/app/logs
      - ./config:/app/config
    depends_on:
      - db
      - redis
    restart: unless-stopped
    networks:
      - scrapemaster-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8513/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  db:
    image: postgres:15-alpine
    container_name: scrapemaster-db
    environment:
      - POSTGRES_DB=scrapemaster
      - POSTGRES_USER=scrapemaster
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    restart: unless-stopped
    networks:
      - scrapemaster-network

  redis:
    image: redis:7-alpine
    container_name: scrapemaster-redis
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    restart: unless-stopped
    networks:
      - scrapemaster-network

  nginx:
    image: nginx:alpine
    container_name: scrapemaster-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
    depends_on:
      - app
    restart: unless-stopped
    networks:
      - scrapemaster-network

  backup:
    image: postgres:15-alpine
    container_name: scrapemaster-backup
    environment:
      - POSTGRES_DB=scrapemaster
      - POSTGRES_USER=scrapemaster
      - POSTGRES_PASSWORD=${DB_PASSWORD}
    volumes:
      - ./backups:/backups
    command: >
      sh -c "while true; do
        PGPASSWORD=${DB_PASSWORD} pg_dump -h db -U scrapemaster scrapemaster > /backups/backup_$$(date +%Y%m%d_%H%M%S).sql;
        find /backups -name 'backup_*.sql' -mtime +7 -delete;
        sleep 86400;
      done"
    depends_on:
      - db
    restart: unless-stopped
    networks:
      - scrapemaster-network

volumes:
  postgres_data:
  redis_data:

networks:
  scrapemaster-network:
    driver: bridge 